Download the Maven Binaries

cd ~/Downloads
wget https://dlcdn.apache.org/maven/maven-3/3.9.1/binaries/apache-maven-3.9.1-bin.tar.gz
tar -xvf apache-maven-3.9.1-bin.tar.gz
sudo mv apache-maven-3.9.1 /opt/
nano ~/.bashrc
export PATH=$PATH:/opt/apache-maven-3.9.1/bin
source ~/.bashrc
mvn --version

Guide for Supporting Multiple Versions of Java (8, 11, 14) in Your Maven Project

Prerequisites:

Installed Maven
Installed multiple versions of Java

Steps for Supporting Multiple Java Versions:

https://dzone.com/articles/guide-for-supporting-multiple-versions-of-java-8-1

Important Point

to use the configured toolchains.xml file when building your project with Maven, you need to pass the toolchain ID as a command-line argument to Maven.
The toolchain ID is the ID attribute of the toolchain element you configured in the toolchains.xml file.

For example, if you have configured a toolchain with the ID "jdk8" for Java 8 
in your toolchains.xml file, you can build your project with that toolchain using the following command:

$ /opt/apache-maven-3.9.1/bin/mvn -Pjdk8 clean install

Here, "-P" option is used to specify the profile you want to activate. You can create a profile with the same ID as the toolchain ID to make things easier.

Note that if you don't specify a toolchain ID, Maven will use the default toolchain, which is usually the highest version of Java installed on your system.
So, it's important to specify the toolchain ID to make sure you are using the correct version of Java for your project.



In Maven, the toolchain and settings.xml files serve different purposes:

Toolchain.xml:
The toolchain.xml file is used to define the toolchain that will be used during the build process. It is typically used to specify the location of a specific version of the JDK or other external tools, which may not be in the system's PATH. The toolchain is defined globally for the entire Maven installation, and can be overridden at the project level by defining a local toolchain.
For example, suppose you have a project that needs to be built using JDK 1.8, but the default JDK on your system is 11. You can define a toolchain for JDK 1.8 in the global toolchain.xml file, and Maven will use it to build the project.

Settings.xml:
The settings.xml file is used to configure Maven settings, such as repositories, mirrors, and proxies. It is also used to define profiles, which are used to configure different build environments.
For example, suppose you have a project that needs to be built using different versions of the JDK, depending on the environment (e.g. development vs. production). You can define different profiles in the settings.xml file, each with its own JDK version, and activate the appropriate profile when building the project.

In your specific case, you used the settings.xml file to define a profile for JDK 1.8, which specifies the location of the javac executable. This allows you to build the project using JDK 1.8 by activating the profile with the "-P" option. You also defined a toolchain for JDK 1.8, which is not strictly necessary in this case, since the JDK location is already specified in the profile.

Overall, the main difference between toolchain.xml and settings.xml is that the former is used to define the external tools used during the build process, while the latter is used to configure Maven settings and profiles.

Sure, let's consider two hypothetical projects, Project A and Project B:

Project A:
Suppose Project A requires JDK 1.8 to build, but your system has JDK 11 as the default JDK. To build Project A, you can define a toolchain for JDK 1.8 in the global toolchain.xml file. This will ensure that Maven uses JDK 1.8 to build the project, regardless of the default JDK on your system.

Project B:
Suppose Project B needs to be built using different versions of the JDK, depending on the environment. For example, in the development environment, you may want to use JDK 11, while in the production environment, you may want to use JDK 1.8 for compatibility reasons. To achieve this, you can define different profiles in the settings.xml file. The development profile can specify JDK 11 as the default JDK, while the production profile can specify JDK 1.8. When building Project B, you can activate the appropriate profile using the "-P" option.



